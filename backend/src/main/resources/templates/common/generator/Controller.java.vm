package ${package}.controller;

import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import io.swagger.annotations.ApiOperation;


import ${package}.entity.${classNameUpFirst}DO;
import ${package}.services.${classNameUpFirst}Service;
import ${package}.common.PageBean;
import ${package}.common.Query;
import ${package}.common.ResponseResult;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */

@Controller
@RequestMapping("/${pathName}/${className}")
public class ${classNameUpFirst}Controller {
    @Autowired
    private ${classNameUpFirst}Service ${className}Service;

    @GetMapping()
    @RequiresPermissions("${pathName}:${className}:${className}")
    String ${className}() {
        return "${pathName}/${className}/${className}";
    }

    @ApiOperation(value = "获取${comments}列表", notes = "获取${comments}列表")
    @ResponseBody
    @GetMapping("/list")
    @RequiresPermissions("${pathName}:${className}:${className}")
    public ResponseResult list(@RequestParam Map<String, Object> params) {
        //查询列表数据
        Query query = new Query(params);
        List<${classNameUpFirst}DO> ${className}List = ${className}Service.list(query);
        int total = ${className}Service.count(query);
        PageBean pageBean = new PageBean(${className}List, total);
        return ResponseResult.ok().put("data", pageBean);
    }

    @ApiOperation(value = "新增${comments}页面", notes = "新增${comments}页面")
    @GetMapping("/add")
    @RequiresPermissions("${pathName}:${className}:add")
    String add() {
        return "${pathName}/${className}/add";
    }

    @ApiOperation(value = "修改${comments}页面", notes = "修改${comments}页面")
    @GetMapping("/edit/{${priKeyColumn.attrName}}")
    @RequiresPermissions("${pathName}:${className}:edit")
    String edit(@PathVariable("${priKeyColumn.attrName}") ${priKeyColumn.javaType} ${priKeyColumn.attrName}, Model model) {
            ${classNameUpFirst}DO ${className} = ${className}Service.get(${priKeyColumn.attrName});
        model.addAttribute("${className}", ${className});
        return "${pathName}/${className}/edit";
    }

    @ApiOperation(value = "查看${comments}页面", notes = "查看${comments}页面")
    @GetMapping("/detail/{${priKeyColumn.attrName}}")
    @RequiresPermissions("${pathName}:${className}:detail")
    String detail(@PathVariable("${priKeyColumn.attrName}") ${priKeyColumn.javaType} ${priKeyColumn.attrName}, Model model) {
			${classNameUpFirst}DO ${className} = ${className}Service.get(${priKeyColumn.attrName});
        model.addAttribute("${className}", ${className});
        return "${pathName}/${className}/detail";
    }

    /**
     * 保存
     */
    @ApiOperation(value = "新增${comments}", notes = "新增${comments}")
    @ResponseBody
    @PostMapping("/save")
    @RequiresPermissions("${pathName}:${className}:add")
    public ResponseResult save( ${classNameUpFirst}DO ${className}) {
        if (${className}Service.save(${className}) > 0) {
            return ResponseResult.ok();
        }
        return ResponseResult.error();
    }

    /**
     * 修改
     */
    @ApiOperation(value = "修改${comments}", notes = "修改${comments}")
    @ResponseBody
    @RequestMapping("/update")
    @RequiresPermissions("${pathName}:${className}:edit")
    public ResponseResult update( ${classNameUpFirst}DO ${className}) {
            ${className}Service.update(${className});
        return ResponseResult.ok();
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除${comments}", notes = "删除${comments}")
    @PostMapping("/remove")
    @ResponseBody
    @RequiresPermissions("${pathName}:${className}:remove")
    public ResponseResult remove( ${priKeyColumn.javaType} ${priKeyColumn.attrName}) {
        if (${className}Service.remove(${priKeyColumn.attrName}) > 0) {
            return ResponseResult.ok();
        }
        return ResponseResult.error();
    }

    /**
     * 删除
     */
    @ApiOperation(value = "批量删除${comments}", notes = "批量删除${comments}")
    @PostMapping("/batchRemove")
    @ResponseBody
    @RequiresPermissions("${pathName}:${className}:batchRemove")
    public ResponseResult remove(@RequestParam("ids[]") ${priKeyColumn.javaType}[] ${priKeyColumn.attrName}s) {
            ${className}Service.batchRemove(${priKeyColumn.attrName}s);
        return ResponseResult.ok();
    }

}
